c
body['pid']
c
JWT.encode(payload, secret_key)
c
expiration
JWT.encode(payload, secret_key)
exit
secret_key
payload
::JWT.encode(payload, secret_key)
c
@user.generate_jwt(secret_key: secret_key, expiration: Time.zone.now.since(14.days))
c
@user.generate_jwt(secret_key: secret_key, expiration: Time.zone.now.since(14.days))
exit
@user.generate_jwt(secret_key: secret_key, expiration: Time.zone.now.sin(14.days))
c
n
User.find_by_email(login_params[:email])
c
exception
n
login_params[:email]
c
login_params
login_params[:email]
c
params.expect(:email)
params
login_params
params[:email]
User.find_by_email(params[:email])
c
response
response.status
c
n
c
response.body
c
response.body
c
response.body
c
response.body
c
response.body
c
response.body
exit
response.body
response.status
c
response.status
c
exit
response.body
response
